#!/bin/bash
# This script is a helper to perform git commit, cleaning up the rails asset directory, clean db
#before a git commit is performed.
#
#
NIL_INSTALL_PATH=
NIL_GIT_COMMIT_MASTER=
NIL_GIT_MASTER=master
NIL_GIT_ORIGIN=origin
#--------------------------------------------------------------------------
#initialize the environment variables.
#NIL_INSTALL_PATH => the rails application installation directory.
#--------------------------------------------------------------------------
initialize(){

    if [ -f "$PWD/app" ] ;
        then
        echo "WARNING !                                                 "
        echo "        Recommended  mode  to  start  the script is by running"
        echo "        d.sh  from  the  script  directory.!!!!"
            NIL_INSTALL_PATH=$PWD
        else
            NIL_INSTALL_PATH=../
	fi

cd $NIL_INSTALL_PATH
}
#
#
#
#--------------------------------------------------------------------------
#parse the input parameters.
# Pattern in case statement is explained below.
# a*)  The letter a followed by zero or more of any
# *a)  The letter a preceded by zero or more of any
#--------------------------------------------------------------------------
parseParameters()   {
#integer index=0
if [ $# -lt 1 ]
then
	help
        exitScript 0
fi
NIL_GIT_COMMIT_MASTER=$2

for item in "$@"
do
    case $item in
        [hH][eE][lL][pP])
            help
            ;;
	[lL][uU][dD])
	licenseupd
	;;
	('/?')
            help
            ;;
           [mM][yY])
	    echo "Howdy $NIL_GIT_MASTER. Enjoy committing local to <master> - Github..."
            mystuff
            ;;
            [oO][mM][yY])
	    echo "Howdy $NIL_GIT_ORIGIN. Enjoy committing local to <origin> - Github..."
            origin_stuff
            ;;
            [uU][pP][dD])
	    echo "Howdy $NIL_GIT_MASTER.enjoy merging <origin> to local..."
            uptodate
            ;;
            [fF][iI][nN][iI][sS][hH])
            finish
            ;;
         [cC][lL][eE][aA][nN])
	    echo "Cleaning up tmp and assets..."
            clean
		exitScript 0
            ;;
 	[pP][rR][eE][cC][oO][mM])
	    echo "Cleaning up tmp and assets, precompiling..."
            precom
            ;;
	'dbis')
	    echo "Initializing sqllite db..."
            dbis
            ;;
   'dbip')
     echo "Initializing psql db..."
          dbip
          ;;
  [vV][eE][rR][sS][iI][oO][nN])
	   version
            ;;
  'status')
	   status
            ;;
   *)
	  echo "Unknown option : $item - refer help."
      help
            ;;
esac
index=$(($index+1))
done
}
#
#
#--------------------------------------------------------------------------
#prints the help to out file.
#--------------------------------------------------------------------------
help(){
    echo "Usage : d.sh [Options]"
    echo "help     : prints the help message."
    echo "status   : does a git status."
    echo "lud      : does a insert of License file into your code."
    echo "my       : does a add, commit and push of my master."
    echo "omy      : does a add, commit and push to origin."
    echo "upd      : does a fetch from origing and merge to my master."
    echo "finish   : does a push of anothers users master to origin"
    echo "           (committer only)"
    echo "clean    : cleans up the temp files."
    echo "precom   : cleans up the temp files and precompiles asset."
    echo "dbis     : initializes your sqllite db."
    echo "dbip     : initializes your psql db."

exitScript 0
}
#--------------------------------------------------------------------------
# status the installation
# this pretty much dumps the environment variables., java path and arguments
#-------------------------------------------------------------------------
status(){
	echo "========================================================="
	printf "%-20s=>\t%s\n" git remote
	echo "========================================================="
	git remote -v
	echo "========================================================="
	printf "%-20s=>\t%s\n" git status
	echo "========================================================="
	git status
	echo "========================================================="
	exitScript 1
}
#
#
#--------------------------------------------------------------------------
#Updates the license text in all the source code.
#--------------------------------------------------------------------------
licenseupd(){
if [ ! -f $LICENSE_FILE_NAME ]
then
    echo $LICENSE_FILE_NAME does not exists.
    exitScript 0
fi
echo "========================================================="
printf "%-20s=>\t%s\n" Updating [$LICENSE_FILE_NAME]
echo "========================================================="
echo -n "Do you want to insert [$LICENSE_FILE_NAME] text into your code [y/n]? "
read -n 1 licenseupd
echo
if [[ $licenseupd =~ ^[Yy]$ ]]
then
echo "========================================================="

cd $JAVA_SRC_DIR

if [ -d $JAVA_OUT_DIR ]
then
rm -r $JAVA_OUT_DIR
fi

mkdir $JAVA_OUT_DIR

for i in `find -type d | sed 's/\.//' | grep -v "^$"`; do mkdir $JAVA_OUT_DIR$i; done
for i in `find -name "*.java"`; do cat $NIL_INSTALL_PATH/$LICENSE_FILE_NAME $i > $JAVA_OUT_DIR/$i ; done
fi

exitScript 0
}
#--------------------------------------------------------------------------
# git add all the files,commits to the local repos.
# performs a push to the users master in github.
#-------------------------------------------------------------------------
mystuff(){

	clean
	echo -n "Do you want to add/commit files [y/n]? "
	read -n 1 addcommit
	echo

	if [[ $addcommit =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git add .
		git commit .
	fi

	echo "========================================================="
	echo -n "Do you want to push to your master [y/n]? "
	read -n 1 pmstr
	echo
	if [[ $pmstr =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git push master
		echo "========================================================="
	fi
	status
	exitScript 1
}
#--------------------------------------------------------------------------
# git add all the files,commits to the local repos.
# performs a push to the committers origin in github.
#-------------------------------------------------------------------------
origin_stuff(){

	clean
	echo -n "Do you want to add/commit files [y/n]? "
	read -n 1 addcommit
	echo

	if [[ $addcommit =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git add .
		git commit .
	fi
	echo "========================================================="
	echo -n "Do you want to push to your origin [y/n]? "
	read -n 1 pmstr
	echo
	if [[ $pmstr =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git push origin
		echo "========================================================="
	fi
	status
	exitScript 1
}
#--------------------------------------------------------------------------
# git add all the files,commits to the local repos.
# performs a push to the users master in github.
#-------------------------------------------------------------------------
uptodate(){
	echo -n "Do you want to add/commit files [y/n]? "
	read -n 1 addcommit
	echo

	if [[ $addcommit =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git add .
		git commit .
	fi
	echo "========================================================="
	echo -n "Do you want to rebase from origin [y/n]? "
	read -n 1 pmstr
	echo
	if [[ $pmstr =~ ^[Yy]$ ]]
	then
		echo "========================================================="
		git fetch origin
		git merge origin/master
		echo "========================================================="
	fi
	exitScript 1
}
#--------------------------------------------------------------------------
# git add all the files,commits to the local repos.
# performs a push to the users master in github.
#-------------------------------------------------------------------------
finish(){
	if [ -z $NIL_GIT_COMMIT_MASTER ]
	then
		echo "Missing parameter <master repository name>."
		help
        	exitScript 1
	else
        echo "Howdy committer.Enjoy merging <$NIL_GIT_COMMIT_MASTER> to origin..."
		echo "========================================================="
		echo -n "Do you want to add/commit files [y/n]? "
		read -n 1 addcommit
		echo

		if [[ $addcommit =~ ^[Yy]$ ]]
		then
			echo "========================================================="
			git add .
			git commit .
		fi
		echo "========================================================="
		echo -n "Do you want to commit $NIL_GIT_COMMIT_MASTER to your origin [y/n]? "
		read -n 1 pmstr
		echo
		if [[ $pmstr =~ ^[Yy]$ ]]
		then
			echo "========================================================="
			git fetch $NIL_GIT_COMMIT_MASTER
			git merge $NIL_GIT_COMMIT_MASTER/master
			git push -u origin $NIL_GIT_COMMIT_MASTER/master
			echo "========================================================="
		fi
	status
	exitScript 0
	fi
}
#
#
#
#
#--------------------------------------------------------------------------
#This command will automatically cleanup the assests and the tmp directory.
#--------------------------------------------------------------------------
clean(){
#
#
clear
find . -type f -name "*.*~" -exec rm -f {} \;
rake assets:clean
rake tmp:clear

#only delete public system directory if it exists
if [ -d public/system ]
then
rm -r public/system
fi

}
#
#
#
#
#--------------------------------------------------------------------------
#This command will automatically cleanup the assests and the tmp directory.
#and run a precompile of the assets.
#--------------------------------------------------------------------------
precom(){
#
#
clear
find . -type f -name "*.*~" -exec rm -f {} \;
rake assets:clean
rake tmp:clear
rake assets:precompile
exitScript 0
}
dbis() {
echo    "========================================================="
echo -n "!!! Do you want to init(drop & recreate) your db [y/n]? "
read -n 1 initdb
echo

if [[ $initdb =~ ^[Yy]$ ]]
then
  echo "========================================================="
  rm -f $MEGAM_HOME/cocdb.db
 rake db:migrate
fi
exitScript 0

}
#
#
#
#--------------------------------------------------------------------------
#This command will automatically bring up the required migration versions and bring it up.
#Run it the first time.
#--------------------------------------------------------------------------
dbip(){
		echo    "========================================================="
		echo -n "!!! Do you want to init(drop & recreate) your db [y/n]? "
		read -n 1 initdb
		echo

		if [[ $initdb =~ ^[Yy]$ ]]
		then
		echo "========================================================="
		# As a super user, to list all of the open connections to the cocdb database
		psql -U postgres -c "select * from pg_stat_activity where datname='cocdb'"
		# As a superuser, to drop all of the open connections to the cocdb database
		psql -U postgres -c "select pg_terminate_backend(pid) from pg_stat_activity where datname='cocdb'"
		# Drop cocdb
		psql -U postgres -c "drop database cocdb"
		# Create cocdb
		psql -U postgres -c "create database cocdb"
		#Grant all privileges on cocdb to user megam, postgres
		psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE cocdb to postgres"
		psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE cocdb to megam"

		#create users
		rake db:migrate:up VERSION=20120319153913  #RAILS_ENV=production
		#create identities
		rake db:migrate:up VERSION=20120319154255
		#create organization
		rake db:migrate:up VERSION=20120811145124
		#create cloud_identities
		rake db:migrate:up VERSION=20120817045502
		#create apps_items
		rake db:migrate:up VERSION=20120824094944
		#create products
		rake db:migrate:up VERSION=20120829143151
	       	#create apps
		rake db:migrate:up VERSION=20130718123920
        #create apps_histories
        rake db:migrate:up VERSION=20130726050612
        #dashboards
        rake db:migrate:up VERSION=20130828100755
        #widgets
        rake db:migrate:up VERSION=20130828101201
		rake db:seed
		fi


	exitScript 0
}
#
#
#
#--------------------------------------------------------------------------
#This command will automatically bring down the required migration versions and bring it up.
#also will perform the required cleanup.
#--------------------------------------------------------------------------
dbclean(){

#remove apps_histories
rake db:migrate:down VERSION=20130726050612
#remove apps
rake db:migrate:down VERSION=20130718123920
#drop identities
rake db:migrate:down VERSION=20120319154255
#drop users
rake db:migrate:down VERSION=20120319153913
#dashboards
rake db:migrate:down VERSION=20130828100755
#widgets
rake db:migrate:down VERSION=20130828101201

#create users
rake db:migrate:up VERSION=20120319153913
#create identities
rake db:migrate:up VERSION=20120319154255
#create apps
rake db:migrate:up VERSION=20130718123920
#create apps_histories
rake db:migrate:up VERSION=20130726050612
#dashboards
rake db:migrate:up VERSION=20130828100755
#widgets
rake db:migrate:up VERSION=20130828101201
rake db:seed

exitScript 0
}
#
#
#
#--------------------------------------------------------------------------
#print the version.
#--------------------------------------------------------------------------
version(){
echo "Nothing to show as version now."
exitScript 0
}
#
#
#
exitScript(){
exit $@
}
#
#
#
#--------------------------------------------------------------------------
# main entry
#--------------------------------------------------------------------------
initialize
#parse parameters
parseParameters "$@"
